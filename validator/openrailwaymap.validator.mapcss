meta
{
	title: "OpenRailwayMap";
	version: "2014-10-06";
	description: "Validation of railway data according to the OpenRailwayMap tagging scheme.";
	author: "rurseekatze";
	link: "https://wiki.openstreetmap.org/wiki/OpenRailwayMap/Tagging";
	watch-modified: true;
}

/* Track with usage AND service */
way[railway][usage][service]
{
	throwError: "Track tagged with usage=* AND service=* - remove one of these tags";
	fixRemove: "service";
	assertMatch: "way railway=rail usage=main service=siding";
	assertNoMatch: "way railway=rail usage=main";
	assertNoMatch: "way railway=rail service=siding";
}

/* Station mapped as way or area */
way[railway=station], area[railway=station]
{
	throwError: "Station mapped as a way, but should be mapped as a node";
	assertMatch: "way railway=station";
	assertMatch: "area railway=station";
	assertNoMatch: "node railway=station";
}

/* Milestone without position */
node[railway=milestone][!railway:position]
{
	throwWarning: "Milestone without position, add railway:position=*";
	assertMatch: "node railway=milestone";
	assertNoMatch: "node railway=milestone railway:position=42.0";
}

/* Track without operator */
way[railway][!operator]
{
	throwOther: "Track without with operator";
	assertMatch: "way railway=rail";
	assertNoMatch: "node railway=rail operator=SNCF";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail operator=SNCF";
}

/* traffic_mode is deprecated, should be changed to railway:traffic_mode */
way[railway][traffic_mode]
{
	throwError: "Key traffic_mode is deprecated, change to railway:traffic_mode";
	fixChangeKey: "traffic_mode=>railway:traffic_mode";
	assertMatch: "way railway=rail traffic_mode=passenger";
	assertNoMatch: "node railway=rail";
	assertNoMatch: "way railway=rail";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail railway:traffic_mode=passenger";
}

/* Track without workrules */
way[railway][!workrules]
{
	throwOther: "Track without with workrules";
	assertMatch: "way railway=rail";
	assertNoMatch: "node railway=rail workrules=EBO";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail workrules=EBO";
}

/* workrules=EBO is deprecated, should be changed to workrules=DE:EBO */
way[railway][workrules=EBO]
{
	throwError: "workrules=EBO is deprecated, change to workrules=DE:EBO";
	assertMatch: "way railway=rail workrules=EBO";
	assertNoMatch: "node railway=rail";
	assertNoMatch: "way railway=rail";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail workrules=DE:EBO";
}

/* workrules=ESBO is deprecated, should be changed to workrules=DE:ESBO */
way[railway][workrules=ESBO]
{
	throwError: "workrules=ESBO is deprecated, change to workrules=DE:ESBO";
	assertMatch: "way railway=rail workrules=ESBO";
	assertNoMatch: "node railway=rail";
	assertNoMatch: "way railway=rail";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail workrules=DE:ESBO";
}

/* workrules=BOStrab is deprecated, should be changed to workrules=DE:BOStrab */
way[railway][workrules=BOStrab]
{
	throwError: "workrules=BOStrab is deprecated, change to workrules=DE:BOStrab";
	assertMatch: "way railway=rail workrules=BOStrab";
	assertNoMatch: "node railway=rail";
	assertNoMatch: "way railway=rail";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail workrules=DE:BOStrab";
}

/* workrules=BOA is deprecated, should be replaced by an adequate value */
way[railway][workrules=BOA]
{
	throwError: "workrules=BOA is deprecated, replace by an adequate value";
	assertMatch: "way railway=rail workrules=BOA";
	assertNoMatch: "node railway=rail";
	assertNoMatch: "way railway=rail";
	assertNoMatch: "area railway=rail";
	assertNoMatch: "way railway=rail workrules=DE:BOStrab";
}

/* operator is not necessary for signals if equal to track operator */
node[railway=signal][operator]
{
	throwWarning: "operator is not necessary for signals if equal to track operator";
	assertMatch: "node railway=signal operator=DB";
	assertNoMatch: "node railway=signal";
	assertNoMatch: "way railway=rail operator=DB";
}

/* operator is not necessary for milestones if equal to track operator */
node[railway=milestone][operator]
{
	throwWarning: "operator is not necessary for milestones if equal to track operator";
	assertMatch: "node railway=milestone operator=DB";
	assertNoMatch: "node railway=milestone";
	assertNoMatch: "way railway=rail operator=DB";
}

/* supervised=* is deprecated, replace it with the new crossing:supervision=* */
node[railway=level_crossing][supervised], node[railway=crossing][supervised]
{
	throwWarning: "supervised=* is deprecated, replace it with the new crossing:supervision=*";
	assertMatch: "node railway=level_crossing supervised=yes";
	assertNoMatch: "node railway=level_crossing";
}

/* ks and hl signals only exist as light signals */
node[railway=signal][railway:signal:main=ks][railway:signal:main:form!=light],
node[railway=signal][railway:signal:distant=ks][railway:signal:distant:form!=light],
node[railway=signal][railway:signal:combined=ks][railway:signal:combined:form!=light],
node[railway=signal][railway:signal:main="DE-ESO:ks"][railway:signal:main:form!=light],
node[railway=signal][railway:signal:distant="DE-ESO:ks"][railway:signal:distant:form!=light],
node[railway=signal][railway:signal:combined="DE-ESO:ks"][railway:signal:combined:form!=light],
node[railway=signal][railway:signal:main=hl][railway:signal:main:form!=light],
node[railway=signal][railway:signal:distant=hl][railway:signal:distant:form!=light],
node[railway=signal][railway:signal:combined=hl][railway:signal:combined:form!=light],
node[railway=signal][railway:signal:main="DE-ESO:hl"][railway:signal:main:form!=light],
node[railway=signal][railway:signal:distant="DE-ESO:hl"][railway:signal:distant:form!=light],
node[railway=signal][railway:signal:combined="DE-ESO:hl"][railway:signal:combined:form!=light]
{
	throwError: "{1.value} signals only exist as light signals";
	assertMatch: "node railway=signal railway:signal:main=ks";
	assertMatch: "node railway=signal railway:signal:main=ks railway:signal:main:form=semaphore";
	assertMatch: "node railway=signal railway:signal:main=hl";
	assertMatch: "node railway=signal railway:signal:main=hl railway:signal:main:form=semaphore";
	assertNoMatch: "node railway=signal railway:signal:main=hl railway:signal:main:form=light";
	assertNoMatch: "node railway=signal railway:signal:main=ks railway:signal:main:form=light";
	fixAdd: "{2.key}=light";
}

/* hp signals only exist as semaphore or light signals */
node[railway=signal][railway:signal:main=hp][railway:signal:main:form!=light][railway:signal:main:form!=semaphore],
node[railway=signal][railway:signal:distant=hp][railway:signal:distant:form!=light][railway:signal:distant:form!=semaphore],
node[railway=signal][railway:signal:combined=hp][railway:signal:combined:form!=light][railway:signal:combined:form!=semaphore],
node[railway=signal][railway:signal:main="DE-ESO:hp"][railway:signal:main:form!=light][railway:signal:main:form!=semaphore],
node[railway=signal][railway:signal:distant="DE-ESO:hp"][railway:signal:distant:form!=light][railway:signal:distant:form!=semaphore],
node[railway=signal][railway:signal:combined="DE-ESO:hp"][railway:signal:combined:form!=light][railway:signal:combined:form!=semaphore]
{
	throwError: "hp signals only exist as semaphore or light signals";
	assertMatch: "node railway=signal railway:signal:main=hp";
	assertMatch: "node railway=signal railway:signal:main=hp railway:signal:main:form=typo";
	assertNoMatch: "node railway=signal railway:signal:main=hp railway:signal:main:form=semaphore";
	assertNoMatch: "node railway=signal railway:signal:main=hp railway:signal:main:form=light";
}
